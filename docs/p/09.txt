Membuat Statusbar Sederhana Pada Arch Linux
____________________________________________________

Statusbar pada GNU/Linux adalah elemen antarmuka 
grafis yang menampilkan informasi penting tentang 
sistem seperti penggunaan CPU, penggunaan memori dan 
status jaringan. 
Biasanya terletak di bagian bawah atau atas layar, 
statusbar memberikan pemantauan real-time yang 
membantu untuk memahami kinerja sistem. Dengan 
memanfaatkan widget dan plugin, kita dapat 
menyesuaikan statusbar sesuai kebutuhan.

Ada banyak beberapa statusbar yang cukup populer dan
sering di gunakan oleh pengguna window manager [1] 
beberapa diantaranya adalah :

* Polybar [2]

* Tint2 [3]
 
* i3status [4]
 
* Dzen2 [5]
 
* Lemonbar [6]

Dan mungkin masih banyak lagi..

Sebelumnya, saya pernah menggunakan beberapa 
statusbar yang cukup populer di atas. Namun, saya 
merasa ingin mengurangi ketergantungan pada sebuah 
paket. Jadi, memanfaatkan Bash untuk membuat 
statusbar sederhana sepertinya adalah ide yang 
tidak terlalu buruk.

Terlebih lagi, i3wm [7] yang saya gunakan memiliki 
fitur scratchpad [8] dan memungkinkan untuk 
menggunakan module ini dengan lebih fleksibel.

Tidak banyak pengalaman dalam menulis Bash. Mohon 
maaf untuk kesalahan logika atau error handling yang
kurang tepat.

  #!/bin/bash -e

  # The MIT License (MIT)
  # https://opensource.org/license/mit
  # Copyright (c) 2024 Sukalaper
  #
  # Reference: 
  # https://github.com/dylanaraps/pure-bash-bible
  # https://www.nerdfonts.com/cheat-sheet

  echo "An itsy bitsy status bar"
  echo "------------------------"
    
  # BATTERY
    # Get value from /sys/class
    # /power_supply/capacity
    # Battery 1
    bat1=$(cat /sys/class
    /power_supply/BAT0/capacity)
    # Battery 2
    bat2=$(cat /sys/class
    /power_supply/BAT1/capacity)
    [[ -n $bat1 && -n $bat2 ]] && { echo  : $bat1;
    echo  : $bat2; } 
    || echo Seems like not correct path.
    
  # AC STATUS
    # Get value from /sys/class
    # /power_supply/AC/online
    # If the value is 1, it is filled in and 
    # vice versa
    charger_status=$(cat /sys/class
    /power_supply/AC/online)
    [[ $charger_status -eq 1 ]] && 
    { echo 󰚥 : Charging; } || echo 󰚦 : Discharging
    
  # DATE
    # Get value from $date 
    # date_now=$(date)
    [[ -n $date_now ]] && { echo  : $date_now; } 
    || echo  : 
    $date_now Something wrong.
    
  # VOLUME 
    # Get value from amixer
    vol=$(awk -F"[][]" '/dB/ { print $2 }' 
    <(amixer sget Master))
    [[ -n $vol ]] && { echo 󰕾 : $vol; } || 
    echo 󰕾 : Not found.
    
  # BRIGHTNESS
    # Get value from brightnessctl
    bright_disp=$(brightnessctl i | 
    grep -E -o '[0-9]{1,3}%')
    [[ -n $bright_disp ]] && 
    { echo 󰃠 : $bright_disp; } || 
    echo 󰃠 : Something wrong.
    
  # NETWORK
    # Get value from nmcli and trim the name
    # So the first 1-3 sentences are used
    wifi_stat=$(nmcli connection show --active | 
    awk '/wifi/ {print $1}' | 
    cut -d ' ' -f 1-3)
    [[ -n $wifi_stat ]] && { echo  : $wifi_stat; } 
    ||  echo  : Not found.
    
  # MEMORY USAGE
    # Get value from ps_mem
    # Installation is required if not available
    mem_usage=$(sudo ps_mem | tail -n 2 | 
    sed 's/ //g' |  sed '/^=*$/d')
    [[ -n $mem_usage ]] && { echo 󰍛 : $mem_usage; } 
    || echo 󰍛 : Not found.
    
  # UPTIME
    # Get value from $uptime and trim the output 
    # Until only hours:minutes are displayed
    time_active=$(uptime | awk -F 'up' '{print $2}' 
    | awk -F ',' '{print $1}' | 
    sed 's/^[ \\t]*//')
    [[ -n $time_active ]] && 
    { echo  : $time_active; } 
    || echo  : Not found.
    
  # SENSORS
    # Show fan speed
    # Get value fan from $sensors and trim the 
    # output
    temp_fan=$(sensors | grep -i "fan" | 
    awk '{print $2}')
    [[ -n $temp_fan ]] 
    && { echo 󰈐 : $temp_fan RPM; } || echo 󰈐 : -
    # Show temperature
    # Get value temp from $sensors and trim the 
    # output
    temp_now=$(sensors | grep -i "temp1" 
    | tail -n1 | awk '{print $2}')
    [[ -n $temp_now ]] && 
    { echo 󰔄 : $temp_now; } || echo 󰔄 : -

Saya sendiri menggunakan bantuan alias [9] pada 
.bashrc [10] untuk menjalankan kode ini agar lebih 
cepat. 
  
  alias wtc='watch -n 5 -t -d ~/.local/
  bin/stat-bar.sh'

Berikut adalah tangkapan layar dari skrip tersebut :

  <image src="09.png">

Kata yang memiliki latar belakang putih menandakan 
perubahan yang sedang terjadi.

[1] https://en.wikipedia.org/wiki/Window_manager
[2] https://github.com/polybar/polybar
[3] https://github.com/o9000/tint2 
[4] https://i3wm.org/docs/i3status.html
[5] https://github.com/minos-org/dzen2
[6] https://github.com/LemonBoy/bar 
[7] https://i3wm.org/
[8] https://shorturl.at/BvwiT
[9] https://phoenixnap.com/kb/linux-alias-command
[10] https://phoenixnap.com/kb/bashrc
